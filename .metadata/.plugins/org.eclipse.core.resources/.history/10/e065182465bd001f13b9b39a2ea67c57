package com.springboot.filmrentalstore.service;

import com.springboot.filmrentalstore.dao.*;
import com.springboot.filmrentalstore.model.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ActorService {

    @Autowired
    private ActorDAO actorRepository;
    
    @Autowired
    private FilmDAO filmRepository;

    @Autowired
    private FilmActorDAO filmActorRepository;
    
    // Add a new Actor
    public String addActor(Actor actor) {
        actorRepository.save(actor);
        return "Record Created Successfully";
    }

    // Search Actors by Last Name
    public List<Actor> getActorsByLastName(String lastName) {
        return actorRepository.findByLastName(lastName);
    }

    // Search Actors by First Name
    public List<Actor> getActorsByFirstName(String firstName) {
        return actorRepository.findByFirstName(firstName);
    }

    // Update Last Name of an Actor
    public Actor updateActorLastName(int id, String lastName) {
        Actor actor = actorRepository.findById(id).orElseThrow(() -> new RuntimeException("Actor Not Found"));
        actor.setLastName(lastName);
        return actorRepository.save(actor);
    }

    // Update First Name of an Actor
    public Actor updateActorFirstName(int id, String firstName) {
        Actor actor = actorRepository.findById(id).orElseThrow(() -> new RuntimeException("Actor Not Found"));
        actor.setFirstName(firstName);
        return actorRepository.save(actor);
    }

    // Get Films by Actor ID
    public List<Film> getFilmsByActorId(int actorId) {
        return actorRepository.findFilmsByActorId(actorId);
    }

 // Assign Film to an Actor
    public String assignFilmToActor(int actorId, Film film) {
        // Find the actor by ID
        Actor actor = actorRepository.findById(actorId).orElseThrow(() -> new RuntimeException("Actor not found"));

        // Check if the film exists (assuming film is passed as a parameter)
        Film existingFilm = filmRepository.findById(film.getFilmId()).orElseThrow(() -> new RuntimeException("Film not found"));

        // Create the association (FilmActor)
        FilmActor filmActor = new FilmActor();
        filmActor.setActor(actor);
        filmActor.setFilm(existingFilm);

        // Save the FilmActor relationship
        filmActorRepository.save(filmActor);

        // Return a success message
        return "Film Assigned Successfully to Actor ID: " + actorId;
    }


    // Find Top 10 Actors by Film Count
    public List<Object[]> getTop10ActorsByFilmCount() {
        return actorRepository.findTop10ActorsByFilmCount();
    }
}
