package com.springboot.filmrentalstore.service;

import com.springboot.filmrentalstore.dao.*;
import com.springboot.filmrentalstore.model.Film;
import com.springboot.filmrentalstore.model.Language;
import com.springboot.filmrentalstore.model.Actor;
import com.springboot.filmrentalstore.model.Category;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.List;

@Service
public class FilmService {

    @Autowired
    private FilmDAO filmRepository;

    // Add a new film
    public String addFilm(Film film) {
        filmRepository.save(film);
        return "Record Created Successfully";
    }

    // Search Films by Title
    public List<Film> searchFilmsByTitle(String title) {
        return filmRepository.findByTitleContaining(title);
    }

    // Search Films by Release Year
    public List<Film> searchFilmsByReleaseYear(int releaseYear) {
        return filmRepository.findByReleaseYear(releaseYear);
    }

    // Search Films with Rental Duration greater than {rd}
    public List<Film> searchFilmsByRentalDurationGreaterThan(int rentalDuration) {
        return filmRepository.findByRentalDurationGreaterThan(rentalDuration);
    }

    // Search Films with Rental Rate greater than {rate}
    public List<Film> searchFilmsByRentalRateGreaterThan(double rentalRate) {
        return filmRepository.findByRentalRateGreaterThan(rentalRate);
    }

    // Search Films with Length greater than {length}
    public List<Film> searchFilmsByLengthGreaterThan(int length) {
        return filmRepository.findByLengthGreaterThan(length);
    }

    // Search Films with Rental Duration less than {rd}
    public List<Film> searchFilmsByRentalDurationLessThan(int rentalDuration) {
        return filmRepository.findByRentalDurationLessThan(rentalDuration);
    }

    // Search Films with Rental Rate less than {rate}
    public List<Film> searchFilmsByRentalRateLessThan(double rentalRate) {
        return filmRepository.findByRentalRateLessThan(rentalRate);
    }

    // Search Films with Length less than {length}
    public List<Film> searchFilmsByLengthLessThan(int length) {
        return filmRepository.findByLengthLessThan(length);
    }

    // Search Films between {fromYear} and {toYear}
    public List<Film> searchFilmsBetweenYears(int fromYear, int toYear) {
        return filmRepository.findByReleaseYearBetween(fromYear, toYear);
    }

    // Search Films with Rating less than {rating}
    public List<Film> searchFilmsByRatingLessThan(double rating) {
        return filmRepository.findByRatingLessThan(rating);
    }

    // Search Films with Rating greater than {rating}
    public List<Film> searchFilmsByRatingGreaterThan(double rating) {
        return filmRepository.findByRatingGreaterThan(rating);
    }

    // Search Films by Language
    public List<Film> searchFilmsByLanguage(String language) {
        return filmRepository.findByLanguage(language);
    }

    // Count Films released by Year
    public List<Object[]> countFilmsByYear() {
        return filmRepository.countFilmsByYear();
    }

    // Find all Actors of a Film by Film ID
    public List<Actor> findActorsByFilmId(int filmId) {
        return filmRepository.findActorsByFilmId(filmId);
    }

    // Find all Films by Category
    public List<Film> findFilmsByCategory(String category) {
        return filmRepository.findFilmsByCategory(category);
    }

    public String assignActorToFilm(int filmId, Actor actor) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        if (film.getActors() == null) {
            film.setActors(new HashSet<>());  // Initialize if null
        }
        film.getActors().add(actor);  // Add the actor to the film
        filmRepository.save(film);
        return "Actor Assigned to Film Successfully";
    }


    // Update Film properties
    public Film updateFilmTitle(int filmId, String newTitle) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setTitle(newTitle);
        return filmRepository.save(film);
    }

    public Film updateFilmReleaseYear(int filmId, int newReleaseYear) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setReleaseYear(newReleaseYear);
        return filmRepository.save(film);
    }

    public Film updateFilmRentalDuration(int filmId, int newDuration) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setRentalDuration(newDuration);
        return filmRepository.save(film);
    }

    public Film updateFilmRentalRate(int filmId, double newRate) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setRentalRate(newRate);
        return filmRepository.save(film);
    }

    public Film updateFilmRating(int filmId, double newRating) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setRating(newRating);
        return filmRepository.save(film);
    }

    public Film updateFilmLanguage(int filmId, Language newLanguage) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setLanguage(newLanguage);  // Update with the full Language object
        return filmRepository.save(film);
    }

    public Film updateFilmCategory(int filmId, Category newCategory) {
        Film film = filmRepository.findById(filmId).orElseThrow(() -> new RuntimeException("Film not found"));
        film.setCategory(newCategory);  // Update with the full Category object
        return filmRepository.save(film);
    }

}
