package com.springboot.filmrentalstore.service;

import com.springboot.filmrentalstore.model.Film;
import com.springboot.filmrentalstore.model.Inventory;
import com.springboot.filmrentalstore.model.Store;
import com.springboot.filmrentalstore.dao.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class InventoryService {

    @Autowired
    private InventoryDAO inventoryRepository;

    public String addFilmToStore(Film film, Store store) {
        Inventory inventory = new Inventory();
        inventory.setFilm(film);
        inventory.setStore(store);
        inventoryRepository.save(inventory);
        return "Record Created Successfully";
    }

    public Map<String, Long> getAllFilmsInventory() {
        List<Inventory> inventories = inventoryRepository.findAll();
        return inventories.stream()
                .collect(Collectors.groupingBy(inventory -> inventory.getFilm().getTitle(), Collectors.counting()));
    }

    public Map<String, Long> getInventoryByStore(Store store) {
        List<Inventory> inventories = inventoryRepository.findByStore(store);
        return inventories.stream()
                .collect(Collectors.groupingBy(inventory -> inventory.getFilm().getTitle(), Collectors.counting()));
    }

    public Map<String, Long> getInventoryByFilm(Film film) {
        List<Inventory> inventories = inventoryRepository.findByFilm(film);
        return inventories.stream()
                .collect(Collectors.groupingBy(inventory -> inventory.getStore().getAddress().getAddress(), Collectors.counting()));
    }

    public Map<String, Long> getInventoryByFilmInStore(Film film, Store store) {
        List<Inventory> inventories = inventoryRepository.findByFilmIdAndStoreId(film.getFilmId(), store.getStoreId());
        return inventories.stream()
                .collect(Collectors.groupingBy(inventory -> inventory.getStore().getAddress().getAddress(), Collectors.counting()));
    }
}
