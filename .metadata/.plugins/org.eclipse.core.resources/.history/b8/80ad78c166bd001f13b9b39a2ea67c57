package com.springboot.filmrentalstore.service;

import com.springboot.filmrentalstore.dao.CustomerDAO;
import com.springboot.filmrentalstore.model.Customer;
import com.springboot.filmrentalstore.model.Address;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CustomerService {

    @Autowired
    private CustomerDAO customerRepository;

    // Add a new Customer
    public String addCustomer(Customer customer) {
        customerRepository.save(customer);
        return "Record Created Successfully";
    }

    // Search Customers by Last Name
    public List<Customer> getCustomersByLastName(String lastName) {
        return customerRepository.findByLastName(lastName);
    }

    // Search Customers by First Name
    public List<Customer> getCustomersByFirstName(String firstName) {
        return customerRepository.findByFirstName(firstName);
    }

    // Search Customer by Email
    public Customer getCustomerByEmail(String email) {
        return customerRepository.findByEmail(email);
    }

    // Assign Address to a Customer
    public Customer assignAddressToCustomer(int customerId, Address address) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        customer.setAddress(address);
        return customerRepository.save(customer);
    }

    // Search Customers by City
    public List<Customer> getCustomersByCity(String city) {
        return customerRepository.findByCity(city);
    }

    // Search Customers by Country
    public List<Customer> getCustomersByCountry(String country) {
        return customerRepository.findByCountry(country);
    }

    // Get all active Customers
    public List<Customer> getActiveCustomers() {
        return customerRepository.findByActive(true);
    }

    // Get all inactive Customers
    public List<Customer> getInactiveCustomers() {
        return customerRepository.findByActive(false);
    }

    // Search Customer by Phone Number
    public Customer getCustomerByPhone(String phone) {
        return customerRepository.findByPhone(phone);
    }

    // Update First Name of a Customer
    public Customer updateCustomerFirstName(int customerId, String firstName) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        customer.setFirstName(firstName);
        return customerRepository.save(customer);
    }

    // Update Last Name of a Customer
    public Customer updateCustomerLastName(int customerId, String lastName) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        customer.setLastName(lastName);
        return customerRepository.save(customer);
    }

    // Update Email of a Customer
    public Customer updateCustomerEmail(int customerId, String email) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        customer.setEmail(email);
        return customerRepository.save(customer);
    }

    // Assign Store to a Customer
    public Customer updateCustomerStore(int customerId, int storeId) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        customer.getStore().setStoreId(storeId);
        return customerRepository.save(customer);
    }

    // Update Phone Number of a Customer
    public Customer updateCustomerPhone(int customerId, String phone) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        customer.setPhone(phone);
        return customerRepository.save(customer);
    }
}
