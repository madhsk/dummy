package com.springboot.filmrentalstore.dao;
 
import com.springboot.filmrentalstore.model.Customer;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.data.jpa.repository.Modifying;

import org.springframework.data.jpa.repository.Query;

import org.springframework.data.repository.query.Param;
 
import java.util.List;
 
public interface CustomerDAO extends JpaRepository<Customer, Integer> {
 
    @Modifying

    @Query("INSERT INTO Customer (firstName, lastName, email, phone, active) VALUES (:firstName, :lastName, :email, :phone, :active)")

    void addCustomer(@Param("firstName") String firstName, @Param("lastName") String lastName, @Param("email") String email, @Param("phone") String phone, @Param("active") boolean active);
 
    // Search Customers by last name

    @Query("SELECT c FROM Customer c WHERE c.lastName = :lastName")

    List<Customer> findByLastName(@Param("lastName") String lastName);
 
    // Search Customers by first name

    @Query("SELECT c FROM Customer c WHERE c.firstName = :firstName")

    List<Customer> findByFirstName(@Param("firstName") String firstName);
 
    // Search Customers by email

    @Query("SELECT c FROM Customer c WHERE c.email = :email")

    Customer findByEmail(@Param("email") String email);
 
    // Assign Address to a Customer

    @Modifying

    @Query("UPDATE Customer c SET c.address.id = :addressId WHERE c.id = :customerId")

    void assignAddressToCustomer(@Param("customerId") int customerId, @Param("addressId") int addressId);
 
    // Search Customers by City

    @Query("SELECT c FROM Customer c JOIN c.address a WHERE a.city = :city")

    List<Customer> findByCity(@Param("city") String city);
 
    // Search Customers by Country

    @Query("SELECT c FROM Customer c JOIN c.address a WHERE a.country = :country")

    List<Customer> findByCountry(@Param("country") String country);
 
    // Search all active Customers

    @Query("SELECT c FROM Customer c WHERE c.active = true")

    List<Customer> findByActive();
 
    // Search all inactive Customers

    @Query("SELECT c FROM Customer c WHERE c.active = false")

    List<Customer> findByInactive();
 
    // Search Customers by phone number

    @Query("SELECT c FROM Customer c JOIN FETCH c.address a WHERE a.phone = :phone")

    Customer findByPhone(@Param("phone") String phone);
 
    // Update first name of Customer

    @Modifying

    @Query("UPDATE Customer c SET c.firstName = :firstName WHERE c.id = :customerId")

    void updateFirstName(@Param("customerId") Long customerId, @Param("firstName") String firstName);
 
    // Update last name of Customer

    @Modifying

    @Query("UPDATE Customer c SET c.lastName = :lastName WHERE c.id = :customerId")

    void updateLastName(@Param("customerId") Long customerId, @Param("lastName") String lastName);
 
    // Update email of Customer

    @Modifying

    @Query("UPDATE Customer c SET c.email = :email WHERE c.id = :customerId")

    void updateEmail(@Param("customerId") Long customerId, @Param("email") String email);
 
    // Assign Store to a Customer

    @Modifying

    @Query("UPDATE Customer c SET c.store.id = :storeId WHERE c.id = :customerId")

    void assignStoreToCustomer(@Param("customerId") Long customerId, @Param("storeId") Long storeId);
 
    // Update phone number of a Customer

    @Modifying

    @Query("UPDATE Customer c SET c.phone = :phone WHERE c.id = :customerId")

    void updatePhone(@Param("customerId") Long customerId, @Param("phone") String phone);
 
}

 