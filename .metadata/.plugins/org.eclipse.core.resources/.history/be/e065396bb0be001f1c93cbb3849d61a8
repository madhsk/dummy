 package com.Project.service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Project.DTO.RentalDTO;
import com.Project.Exception.ResourceNotFoundException;
import com.Project.Repo.RentalRepository;
import com.Project.model.Rental;

@Service
public class RentalService implements IRentalService {  // Implementing the interface

    @Autowired
    private RentalRepository rentalRepository;

    private ModelMapper modelMapper = new ModelMapper();

    @Override
    public RentalDTO addRental(RentalDTO rentalDTO) {
        Rental rental = modelMapper.map(rentalDTO, Rental.class);
        rental.setRentalDate(LocalDateTime.now());
        rental.setLastUpdate(LocalDateTime.now());
        Rental savedRental = rentalRepository.save(rental);
        return modelMapper.map(savedRental, RentalDTO.class);
    }
    
    @Override
    public List<RentalDTO> getRentalsByCustomerId(Long customerId) throws ResourceNotFoundException {
        List<Rental> rentals = rentalRepository.findAll()
            .stream()
            .filter(rental -> rental.getCustomer().getCustomerId().equals(customerId))
            .collect(Collectors.toList());

        if (rentals.isEmpty()) {
            throw new ResourceNotFoundException("No rentals found for customer id: " + customerId);
        }

        return rentals.stream()
            .map(rental -> modelMapper.map(rental, RentalDTO.class))
            .collect(Collectors.toList());
    }
    @Override
    public List<RentalDTO> getTopTenFilms() {
        // Logic for finding the top 10 most rented films
        List<Rental> rentals = rentalRepository.findAll().stream()
            .sorted((r1, r2) -> r2.getRentalDate().compareTo(r1.getRentalDate()))  // Sort by rental date
            .limit(10)
            .collect(Collectors.toList());

        return rentals.stream()
            .map(rental -> modelMapper.map(rental, RentalDTO.class))
            .collect(Collectors.toList());
    }
    @Override
    public List<RentalDTO> getTopTenFilmsByStore(Long storeId) {
        // Logic for finding the top 10 most rented films by store
        List<Rental> rentals = rentalRepository.findAll().stream()
            .filter(rental -> rental.getInventory().getStore().getStoreId().equals(storeId))
            .sorted((r1, r2) -> r2.getRentalDate().compareTo(r1.getRentalDate()))  // Sort by rental date
            .limit(10)
            .collect(Collectors.toList());

        return rentals.stream()
            .map(rental -> modelMapper.map(rental, RentalDTO.class))
            .collect(Collectors.toList());
    }
    @Override
    public Map<Long,String> getCustomersWithPendingReturnsByStore(Long storeId) {
        // Logic to get customers with pending returns by store
        List<Rental> rentals = rentalRepository.findAll().stream()
            .filter(rental -> rental.getReturnDate() == null && rental.getInventory().getStore().getStoreId().equals(storeId))
            .collect(Collectors.toList());
        
        Map<Long,String> customerDetails = new HashMap<>();
        
        for(Rental r : rentals) {
        	customerDetails.put(r.getCustomer().getCustomerId(),r.getCustomer().getFirstName());
        }
       
//        return rentals.stream()
//            .map(rental -> modelMapper.map(rental, RentalDTO.class))
//            .collect(Collectors.toList());
        return customerDetails;
        
    }
    @Override
    public RentalDTO updateReturnDate(Long rentalId, LocalDateTime returnDate) throws ResourceNotFoundException {
        Rental rental = rentalRepository.findById(rentalId)
            .orElseThrow(() -> new ResourceNotFoundException("Rental not found with id: " + rentalId));
        rental.setReturnDate(returnDate);
        rental.setLastUpdate(LocalDateTime.now());
        Rental updatedRental = rentalRepository.save(rental);
        return modelMapper.map(updatedRental, RentalDTO.class);
    }

}
