package com.springboot.filmrentalstore;

import org.modelmapper.ModelMapper;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.DependsOn;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import com.springboot.filmrentalstore.filter.JwtFilter;
import com.springboot.filmrentalstore.service.CustomUserDetailsService;

@SpringBootApplication
public class FilmrentalstoreApplication {
	public static void main(String[] args) {
		SpringApplication.run(FilmrentalstoreApplication.class, args);
	}

	@Bean
	public ModelMapper modelMapper() {
		return new ModelMapper();
	}

	@Bean
	@DependsOn("userDetailsService")
	public DaoAuthenticationProvider daoAuthenticationProvider() {
		CustomUserDetailsService service = userDetailsService();

		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(service);
		provider.setPasswordEncoder(passwordEncoder());
		return provider;
	}

	@Bean
	public CustomUserDetailsService userDetailsService() {

		return new CustomUserDetailsService(); // Implement your own user details service
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder(); // Use a password encoder of your choice
	}

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		System.out.println("invoked");
		http.csrf().disable() // Disable CSRF protection
				.authorizeRequests().requestMatchers("/api/auth").permitAll().
				requestMatchers("/api/user/register").permitAll()
				//.requestMatchers(HttpMethod.POST, "/api/actors/post").hasAnyRole("STAFF")
				.requestMatchers(HttpMethod.GET, "/api/actors/lastname/{ln}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/actors/firstname/{fn}").hasAnyRole("USER")
//				//.requestMatchers(HttpMethod.PUT, "/api/actors/update/*").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.PUT, "/api/actors/{id}/films").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/actors/{id}/film").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.PUT, "/api/actors/toptenbyfilmcount").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/actors/{id}/film").hasAnyRole("USER")
//
//				.requestMatchers(HttpMethod.POST, "/api/customers/post").hasAnyRole("ADMIN", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/lastname/{ln}").hasAnyRole("ADMIN", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/firstname/{fn}").hasAnyRole("ADMIN", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/email/{email}").hasAnyRole("ADMIN", "STAFF")
//				.requestMatchers(HttpMethod.PUT, "/api/customers/{id}/{addressId}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/city/{city}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/country/{country}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/active").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/inactive").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/customers/phone/{phone}").hasAnyRole("STAFF")
////				.requestMatchers(HttpMethod.PUT, "/api/customers/update/{id}/*").hasAnyRole("STAFF")
//
//				.requestMatchers(HttpMethod.POST, "/api/staff/post").hasAnyRole("ADMIN")
////				.requestMatchers(HttpMethod.GET, "/api/staff/*").hasAnyRole("ADMIN")
////				.requestMatchers(HttpMethod.PUT, "/api/staff/update/*").hasAnyRole("ADMIN")
//
//				.requestMatchers(HttpMethod.POST, "/api/store/post").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.PUT, "/api/store/{storeId}/address/{addressId}").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/store/city/{city}").hasAnyRole("USER", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/store/country/{country}").hasAnyRole("USER", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/store/phone/{phone}").hasAnyRole("USER", "STAFF")
//				.requestMatchers(HttpMethod.PUT, "/api/store/update/{storeId}/{phone}").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.PUT, "/api/store/{storeId}/manager/{manager_staff_id}").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/store/staff/{storeId}").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/store/customer/{storeId}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/store/manager/{storeId}").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/store/managers").hasAnyRole("ADMIN")
//
//				.requestMatchers(HttpMethod.POST, "/api/inventory/add").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/inventory/films").hasAnyRole("ADMIN", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/inventory/store/{id}").hasAnyRole("USER", "STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/inventory/film/{id}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/inventory/film/{id}/store/{id}").hasAnyRole("USER", "STAFF")
//
//				.requestMatchers(HttpMethod.POST, "/api/rental/add").hasAnyRole("STAFF", "USER")
//				.requestMatchers(HttpMethod.GET, "/api/rental/customer/{id}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/rental/toptenfilms").hasAnyRole("STAFF", "USER", "ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/rental/toptenfilms/store/{id}").hasAnyRole("STAFF", "USER")
//				.requestMatchers(HttpMethod.GET, "/api/rental/due/store/{id}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.POST, "/api/rental/update/returndate/{id}").hasAnyRole("STAFF")
//
//				.requestMatchers(HttpMethod.POST, "/api/payment/add").hasAnyRole("STAFF", "USER")
//				.requestMatchers(HttpMethod.GET, "/api/payment/revenue/datewise").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/payment/revenue/datewise/store/{id}").hasAnyRole("STAFF")
//				.requestMatchers(HttpMethod.GET, "/api/payment/revenue/filmwise").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/payment/revenue/film/{id}").hasAnyRole("ADMIN")
//				.requestMatchers(HttpMethod.GET, "/api/payment/revenue/films/store/{id}").hasAnyRole("ADMIN")
//
//				.requestMatchers(HttpMethod.POST, "/api/films/post").hasAnyRole("ADMIN")
//				//.requestMatchers(HttpMethod.GET,"/api/films/**").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/title/{title}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/year/{year}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/duration/gt/{rd}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/rate/gt/{rate}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/length/gt/{length}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/betweenyear/{from}/{to}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/rating/lt/{rating}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/rating/gt/{rating}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/language/{lang}").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/countbyyear").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/{id}/actors").hasAnyRole("USER")
//				.requestMatchers(HttpMethod.GET, "/api/films/category/{category}").hasAnyRole("USER")
//
//				.requestMatchers(HttpMethod.PUT, "/api/films/update/**").hasAnyRole("ADMIN", "STAFF")

				.anyRequest().authenticated().and()
				.addFilterBefore(new JwtFilter(), UsernamePasswordAuthenticationFilter.class).sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().sessionManagement().disable()

				.authenticationManager(new ProviderManager(daoAuthenticationProvider()));

		return http.build();
	}
}
