package com.springboot.filmrentalstore.controller;

import com.springboot.filmrentalstore.model.*;
import com.springboot.filmrentalstore.model.Address;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.springboot.filmrentalstore.service.*;

import jakarta.validation.Valid;

import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("/api/staff")
//updated code
public class StaffController {
	@Autowired
    IStaffService staffService;
	

	
//	@PostMapping("/login")
//	public ResponseEntity<StaffDTO> login(@RequestBody LoginDTO loginRequest) {
//	    // Authenticate the staff with username and password
//	    //StaffDTO staffDTO = staffService.authenticateStaff(loginRequest.getUsername(), loginRequest.getPassword());
//	    
//	    if (staffDTO != null) {
//	        // If authentication is successful, return the StaffDTO in the response
//	        return ResponseEntity.ok(staffDTO);
//	    } else {
//	        // If authentication fails, return HTTP 401 Unauthorized
//	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
//	    }
//	}


	@PostMapping("/create")
    public ResponseEntity<?> addStaff(@Valid @RequestBody StaffDTO staffDTO) {
        StaffDTO createdStaff = staffService.addStaff(staffDTO);
        return new ResponseEntity<>("Staff successfully posted", HttpStatus.CREATED);
    }
 
    @GetMapping("/lastname/{lastName}")
    public ResponseEntity<List<StaffDTO>> findByLastName(@PathVariable("lastName") String lastName) throws ResourceNotFoundException {
        List<StaffDTO> staffList = staffService.findStaffByLastName(lastName);
        return new ResponseEntity<>(staffList, HttpStatus.OK);
    }
 
    @GetMapping("/firstname/{firstName}")
    public ResponseEntity<List<StaffDTO>> findByFirstName(@PathVariable("firstName") String firstName) throws ResourceNotFoundException {
        List<StaffDTO> staffList = staffService.findStaffByFirstName(firstName);
        return new ResponseEntity<>(staffList, HttpStatus.OK);
    }
 
    @GetMapping("/email/{email}")
    public ResponseEntity<List<StaffDTO>> findByEmail(@PathVariable("email") String email) throws ResourceNotFoundException {
        List<StaffDTO> staffList = staffService.findStaffByEmail(email);
        return new ResponseEntity<>(staffList, HttpStatus.OK);
    }
 
    @GetMapping("/city/{city}")
    public ResponseEntity<List<StaffDTO>> findByAddress_City_CityName(@PathVariable("city") String city) throws ResourceNotFoundException {
        List<StaffDTO> staffList = staffService.findByAddress_City_CityName(city);
        return new ResponseEntity<>(staffList, HttpStatus.OK);
    }
 
    @GetMapping("/country/{country}")
    public ResponseEntity<List<StaffDTO>> findByAddress_City_Country_CountryName(@PathVariable String country) throws ResourceNotFoundException {
        List<StaffDTO> staffList = staffService.findByAddress_City_Country_CountryName(country);
        return new ResponseEntity<>(staffList, HttpStatus.OK);
    }
 
    @GetMapping("/phone/{phone}")
    public ResponseEntity<List<StaffDTO>> findByPhoneNumber(@PathVariable("phone") String phone) throws ResourceNotFoundException {
        List<StaffDTO> staffDTOList = staffService.findStaffByPhoneNumber(phone);
        if (staffDTOList.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
 
        return new ResponseEntity<>(staffDTOList, HttpStatus.OK);
    }
    
 
 
    @PutMapping("/update/firstName/{id}")
    public ResponseEntity<StaffDTO> updateFirstName(@PathVariable("id") Long id, @RequestBody String firstName) throws ResourceNotFoundException {
        StaffDTO updatedStaff = staffService.updateFirstName(id, firstName);
        return new ResponseEntity<>(updatedStaff, HttpStatus.OK);
    }
 
    @PutMapping("/update/lastName/{id}")
    public ResponseEntity<StaffDTO> updateLastName(@PathVariable Long id, @RequestBody String lastName) throws ResourceNotFoundException {
        StaffDTO updatedStaff = staffService.updateLastName(id, lastName);
        return new ResponseEntity<>(updatedStaff, HttpStatus.OK);
    }
 
    @PutMapping("/update/email/{id}")
    public ResponseEntity<StaffDTO> updateEmail(@PathVariable("id") Long id, @RequestBody String email) throws ResourceNotFoundException {
        StaffDTO updatedStaff = staffService.updateEmail(id, email);
        return new ResponseEntity<>(updatedStaff, HttpStatus.OK);
    }
 
    @PutMapping("/update/phone/{id}")
    public ResponseEntity<StaffDTO> updatePhoneNumberInAddress(@PathVariable("id") Long id, @RequestBody String phoneNumber) throws ResourceNotFoundException {
        StaffDTO updatedStaff = staffService.updatePhoneNumberInAddress(id, phoneNumber);
        return new ResponseEntity<>(updatedStaff, HttpStatus.OK);
    }
 
 
    @PutMapping("/update/address/{staffId}")
    public ResponseEntity<StaffDTO> assignAddressToStaff(@PathVariable("staffId") Long staffId, @RequestBody Address address) throws ResourceNotFoundException {
        StaffDTO staffWithAddress = staffService.assignAddress(staffId, address);
        return new ResponseEntity<>(staffWithAddress, HttpStatus.OK);
    }
    @PutMapping("/{id}/store")
    public ResponseEntity<StaffDTO> updateStore(@PathVariable("id") Long id, @RequestBody Store store) throws ResourceNotFoundException {
//        try {
//            StaffDTO updatedStaff = staffService.updateStore(id, store);
//            return new ResponseEntity<>(updatedStaff, HttpStatus.OK);
//        } catch (ResourceNotFoundException e) {
//            // Return a 404 Not Found response if the resource is not found
//            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
//        }
        
//        StaffDTO updatedStaff = staffService.updateStore(id, store);
        return new ResponseEntity<>(staffService.updateStore(id, store), HttpStatus.OK);
    }

}
